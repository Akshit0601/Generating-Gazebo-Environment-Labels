<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="traffic_bot3">
    <!-- <xacro:include filename="colors.xacro" /> -->
    <xacro:include filename="$(find generate_labels)/urdf/inertial_macros.xacro"/>

    <xacro:property name="wheel_radius" value="0.15" />
    <xacro:property name="wheel_length" value="0.20" />
    <xacro:property name="wheel_color_name" value="red" />
    <xacro:property name="wheel_color_rgb" value="1 0 0 1" />
    <!-- <xacro:arg name="robot_namespace" default=""/> -->
    <xacro:arg name="robot_namespace" default=""/>
    <xacro:arg name="bit1" default="0xffff"/>
    <!-- <xacro:arg name="bit2" default="0xffff"/>
    <xacro:arg name="bit3" default="0xffff"/>
    <xacro:arg name="bit4" default="0xffff"/>
    <xacro:arg name="bit5" default="0xffff"/> -->
    
    <xacro:macro name="box_link" params="name size color color_rgb mass mass_x mass_y mass_z" >
        <link name="$(arg robot_namespace)/${name}">
            <visual>
                <geometry>
                    <box size="${size}"/>
                </geometry>
                <material name="${color}">
                    <color rgba="${color_rgb}"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
                <geometry>
                    <box size="${size}"/>
                </geometry>
            </collision>
            <xacro:inertial_box mass="${mass}" x="${mass_x}" y="${mass_y}" z="${mass_z}">
                <origin xyz="${mass_x} ${mass_y} ${mass_z}" rpy="0 0 0"/>
            </xacro:inertial_box>                
        </link>
    </xacro:macro>

    <xacro:macro name="wheel" params="name mass">
        <link name="$(arg robot_namespace)/${name}">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_length}" />
                </geometry>
                <material name="${wheel_color_name}">
                    <color rgba="${wheel_color_rgb}"/>
                </material>
            </visual>
            <collision>
                <geometry>
                    <cylinder length="${wheel_length}" radius="${wheel_radius}" />
                </geometry>
                <material name="blue"/>
            </collision>
            <xacro:inertial_cylinder mass="${mass}" length="${wheel_length}" radius="${wheel_radius}">
                <origin xyz="0 0 0" rpy="0 0 0"/>
            </xacro:inertial_cylinder>              
        </link> 
    </xacro:macro>  



    <xacro:macro name="wheel_joint" params="name parent child xyz ">
        <joint name="$(arg robot_namespace)/${name}" type="continuous">
            <parent link="$(arg robot_namespace)/${parent}" />
            <child link="$(arg robot_namespace)/${child}" />
            <origin xyz="${xyz}" rpy="${-pi/2} 0 0"/>
            <axis rpy="0 0 0" xyz="0 0 1"/>
            <!-- limit effort="1" velocity="1"/>
            <joint_properties damping="1.0" friction="1.0"/ -->
        </joint>
    </xacro:macro>   

    <!-- Robot Description -->
     <link name="$(arg robot_namespace)/base_link">
    </link>         


    <xacro:box_link name="base_footprint" size="4.0 1.4 0.2" color="green" color_rgb="0 1 0 1" 
        mass="0.5" mass_x="2.0" mass_y="0.7" mass_z="0.05"/>

    <joint name="$(arg robot_namespace)/base_joint" type="fixed">
        <parent link="$(arg robot_namespace)/base_link"/>
        <child link="$(arg robot_namespace)/base_footprint"/>
        <origin xyz="0 0 0"/>
    </joint>

    <xacro:wheel name="right_wheel_frontside" mass="0.1" />
    <xacro:wheel_joint name="base_link_right_wheel_frontside" parent="base_link" 
        child="right_wheel_frontside" xyz="1.5 -0.825 -0.0" />

    <xacro:wheel name="right_wheel_backside" mass="0.1" />
    <xacro:wheel_joint name="base_link_right_wheel_backside" parent="base_link" 
        child="right_wheel_backside" xyz="-1.5 -0.825 -0.0" />

    <xacro:wheel name="left_wheel_frontside" mass="0.1" /> 
    <xacro:wheel_joint name="base_link_left_wheel_frontside" parent="base_link" 
        child="left_wheel_frontside" xyz="1.5 0.825 -0.0" />

    <xacro:wheel name="left_wheel_backside" mass="0.1" /> 
    <xacro:wheel_joint name="base_link_left_wheel_backside" parent="base_link" 
        child="left_wheel_backside" xyz="-1.5 0.825 -0.0" />

    <!-- Gazebo Colors -->
    <gazebo reference="$(arg robot_namespace)/base_footprint">
        <material>Gazebo/Green</material>
        <collision> 
            <surface>
                <contact>
                    <collide_bitmask>$(arg bit1)</collide_bitmask>
                </contact>
            </surface>
        </collision>
    </gazebo>
    <gazebo reference="$(arg robot_namespace)/right_wheel_frontside">
        <material>Gazebo/Red</material>
        <collision>
            <surface>
                <friction>
                    <ode>
                    <mu>1.0</mu>
                    <mu2>2.0</mu2>
                    </ode>
                </friction>
                <contact>
                    <collide_bitmask>$(arg bit1)</collide_bitmask>
                </contact>
            </surface>
        </collision>
    </gazebo>
    
    <gazebo reference="$(arg robot_namespace)/right_wheel_backside">
        <material>Gazebo/Red</material>
        <collision>
            <surface>
                <friction>
                    <ode>
                    <mu>1.0</mu>
                    <mu2>2.0</mu2>
                    </ode>
                </friction>
                <contact>
                    <collide_bitmask>$(arg bit1)</collide_bitmask>
                </contact>
            </surface>
        </collision>
    </gazebo>
    <gazebo reference="$(arg robot_namespace)/left_wheel_frontside">
        <material>Gazebo/Red</material>
        <collision>
            <surface>
                <friction>
                    <ode>
                    <mu>1.0</mu>
                    <mu2>2.0</mu2>
                    </ode>
                </friction>
                <contact>
                    <collide_bitmask>$(arg bit1)</collide_bitmask>
                </contact>
            </surface>
        </collision>
    </gazebo>
    <gazebo reference="$(arg robot_namespace)/left_wheel_backside">
        <material>Gazebo/Red</material>
        <collision>
            <surface>
                <friction>
                    <ode>
                    <mu>1.0</mu>
                    <mu2>2.0</mu2>
                    </ode>
                </friction>
                <contact>
                    <collide_bitmask>$(arg bit1)</collide_bitmask>
                </contact>
            </surface>
        </collision>
    </gazebo>

    <gazebo>
        <plugin name="wheel_drive_controller" filename="libgazebo_ros_diff_drive.so">
            <!-- wheels -->
            <num_wheel_pairs>2</num_wheel_pairs>
            <left_joint>$(arg robot_namespace)/base_link_left_wheel_frontside</left_joint>
            <left_joint>$(arg robot_namespace)/base_link_left_wheel_backside</left_joint>
            <right_joint>$(arg robot_namespace)/base_link_right_wheel_frontside</right_joint>
            <right_joint>$(arg robot_namespace)/base_link_right_wheel_backside</right_joint>

            <!-- kinematics -->
            <wheel_separation>1.65</wheel_separation>
            <wheel_diameter>0.30</wheel_diameter>



            <!-- Limits -->
            <max_wheel_torque>20.0</max_wheel_torque>
            
            <max_wheel_acceleration>40.0</max_wheel_acceleration>
            <odometry_source>1</odometry_source>




            <!-- Output -->
            <odometry_frame>$(arg robot_namespace)/odom</odometry_frame>
            <robot_base_frame>$(arg robot_namespace)/base_link</robot_base_frame>

            <!-- topic & re remappings -->
            <ros>
                <remapping>/cmd_vel:=$(arg robot_namespace)/cmd_vel</remapping>
                <remapping>/odom:=$(arg robot_namespace)/odom</remapping>
                <namespace>$(arg robot_namespace)</namespace>
            </ros>
         
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <!-- <publishWheelJointState>true</publishWheelJointState> -->
            <publish_wheel_tf>true</publish_wheel_tf>

            <update_rate>30.0</update_rate>
        </plugin>
    </gazebo>


</robot>
